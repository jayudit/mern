const jwt = require('jsonwebtoken') //bring in jsonwebtokens library
const bcrypt = require('bcryptjs')
const asyncHandler = require('express-async-handler')
const User = require('../models/userModel') //bring in the userModel

// @ desc Register a new user
// @ route POST /api/users
// @ access  Public
const registerUser = asyncHandler(async(req, res) => { //wrap in asyncHandler to handle exceptions
    const {name, email, password} = req.body //get the name, email, pw contained in the POST req body

    //check if name,email,pw are included in the body
    if(!name || !email || !password ) {
        res.status(400)
        throw new Error('Please add all fields ')
    }

    //check if user already exists
    const userExists = await User.findOne({email})

    if(userExists) {
        res.status(400)
        throw new Error('User already exists')
    }

    // Hash password
    const salt = await bcrypt.genSalt(10)
    const hashedPassword = await bcrypt.hash(password, salt)

    //Create User
    const user = await User.create({name, email, password: hashedPassword})

    //Check if user was created
    if(user) {
        res.status(201).json({
            _id: user.id,
            name: user.name,
            email: user.email,
            token: generateToken(user._id)
        })
    } else {
        res.status(400)
        throw new Error('Invalid user Data')
    }
})


// @ desc Authenticate a user
// @ route POST /api/login
// @ access  Public
const loginUser = asyncHandler(async(req, res) => {
    //get the email and password sent in POST req body
    const {email, password} = req.body

    //find user by email
    const user = await User.findOne({email}) //set user = the email that was typed in the req body
    
    //check password -- password in db is hashed vs password in req is not hashed. must use bcrypt method compare.
    if(user && (await bcrypt.compare(password,user.password))){
        res.status(201).json({
            _id: user.id,
            name: user.name,
            email: user.email,
            token: generateToken(user._id)
        })
    } else {
        res.status(400)
        throw new Error('Invalid credentials')
    } 
})

// @ desc Get user data
// @ route POST /api/users/me
// @ access  getMe
const getMe = asyncHandler(async(req, res) => {
    res.status(200).json(req.user) //respond with a res status 200 and send the req.user 
})



//Generate JWT function
//Inputs: ID
//Outputs: JWT token signed using secret key
const generateToken = (id) => {
    return jwt.sign ({id}, process.env.JWT_SECRET, {expiresIn: '30d',})
}


module.exports = {
    registerUser,
    loginUser,
    getMe,
}